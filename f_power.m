function [f_surf,f_vol] = f_power(k_2,k,h, omega,lambda,mu,c_l,c_t,A,B,C)
%P_ENERGY_FLOW 此处显示有关此函数的摘要
%   k,h 为同维度的向量；omega,lambda,mu为数字。
alpha = sqrt( (omega/c_l).^2 - k.^2 );
beta = sqrt( (omega/c_t).^2 - k.^2 );
alpha_2 = sqrt( (omega*2/c_l).^2 - k_2.^2 );
beta_2 = sqrt( (omega*2/c_t).^2 - k_2.^2 );

%
f_surf =- 2.*omega.*conj(beta_2).*(conj(k_2).^2.*cos(h.*conj(alpha_2)).*cos(h.*conj(beta_2)) + cos(h.*conj(alpha_2)).*cos(h.*conj(beta_2)).*(conj(beta_2).^2./2 - conj(k_2).^2./2)).*((A./4 + mu).*(k.^3.*(beta.*cos(alpha.*h).*cos(beta.*h).*(beta.^2./2 - k.^2./2) - alpha.^2.*beta.*cos(alpha.*h).*cos(beta.*h)).*(cos(alpha.*h).*sin(beta.*h).*(beta.^2./2 - k.^2./2) - alpha.*beta.*cos(beta.*h).*sin(alpha.*h)).*1i - beta.*k.^3.*(cos(alpha.*h).*cos(beta.*h).*(beta.^2./2 - k.^2./2) + k.^2.*cos(alpha.*h).*cos(beta.*h)).*(cos(alpha.*h).*sin(beta.*h).*(beta.^2./2 - k.^2./2) - alpha.*beta.*cos(beta.*h).*sin(alpha.*h)).*1i - beta.*k.*(beta.*cos(alpha.*h).*cos(beta.*h).*(beta.^2./2 - k.^2./2) - alpha.^2.*beta.*cos(alpha.*h).*cos(beta.*h)).*(beta.*cos(alpha.*h).*sin(beta.*h).*(beta.^2./2 - k.^2./2) + alpha.*k.^2.*cos(beta.*h).*sin(alpha.*h)).*2i + beta.^2.*k.*(beta.*cos(alpha.*h).*sin(beta.*h).*(beta.^2./2 - k.^2./2) + alpha.*k.^2.*cos(beta.*h).*sin(alpha.*h)).*(cos(alpha.*h).*cos(beta.*h).*(beta.^2./2 - k.^2./2) + k.^2.*cos(alpha.*h).*cos(beta.*h)).*2i) + (A.*(k.^3.*(beta.*cos(alpha.*h).*cos(beta.*h).*(beta.^2./2 - k.^2./2) - alpha.^2.*beta.*cos(alpha.*h).*cos(beta.*h)).*(cos(alpha.*h).*sin(beta.*h).*(beta.^2./2 - k.^2./2) - alpha.*beta.*cos(beta.*h).*sin(alpha.*h)).*1i - beta.*k.^3.*(cos(alpha.*h).*cos(beta.*h).*(beta.^2./2 - k.^2./2) + k.^2.*cos(alpha.*h).*cos(beta.*h)).*(cos(alpha.*h).*sin(beta.*h).*(beta.^2./2 - k.^2./2) - alpha.*beta.*cos(beta.*h).*sin(alpha.*h)).*1i))./4 - beta.*(B + lambda).*(k.*(beta.*cos(alpha.*h).*cos(beta.*h).*(beta.^2./2 - k.^2./2) - alpha.^2.*beta.*cos(alpha.*h).*cos(beta.*h)) - beta.*k.*(cos(alpha.*h).*cos(beta.*h).*(beta.^2./2 - k.^2./2) + k.^2.*cos(alpha.*h).*cos(beta.*h))).*(beta.*cos(alpha.*h).*sin(beta.*h).*(beta.^2./2 - k.^2./2) + alpha.*k.^2.*cos(beta.*h).*sin(alpha.*h)).*1i + B.*k.^2.*(k.*(beta.*cos(alpha.*h).*cos(beta.*h).*(beta.^2./2 - k.^2./2) - alpha.^2.*beta.*cos(alpha.*h).*cos(beta.*h)) - beta.*k.*(cos(alpha.*h).*cos(beta.*h).*(beta.^2./2 - k.^2./2) + k.^2.*cos(alpha.*h).*cos(beta.*h))).*(cos(alpha.*h).*sin(beta.*h).*(beta.^2./2 - k.^2./2) - alpha.*beta.*cos(beta.*h).*sin(alpha.*h)).*1i) - omega.*conj(k_2).*(sin(h.*conj(beta_2)).*cos(h.*conj(alpha_2)).*(conj(beta_2).^2./2 - conj(k_2).^2./2) - conj(alpha_2).*conj(beta_2).*cos(h.*conj(beta_2)).*sin(h.*conj(alpha_2))).*((A.*(k.^2.*(beta.*cos(alpha.*h).*cos(beta.*h).*(beta.^2./2 - k.^2./2) - alpha.^2.*beta.*cos(alpha.*h).*cos(beta.*h)).^2 + beta.*k.^2.*(beta.*cos(alpha.*h).*sin(beta.*h).*(beta.^2./2 - k.^2./2) + alpha.*k.^2.*cos(beta.*h).*sin(alpha.*h)).*(cos(alpha.*h).*sin(beta.*h).*(beta.^2./2 - k.^2./2) - alpha.*beta.*cos(beta.*h).*sin(alpha.*h))))./4 - (B./2 + lambda./2).*(beta.^2.*(beta.*cos(alpha.*h).*sin(beta.*h).*(beta.^2./2 - k.^2./2) + alpha.*k.^2.*cos(beta.*h).*sin(alpha.*h)).^2 + k.^4.*(cos(alpha.*h).*sin(beta.*h).*(beta.^2./2 - k.^2./2) - alpha.*beta.*cos(beta.*h).*sin(alpha.*h)).^2) + (A./4 + mu).*(3.*k.^2.*(beta.*cos(alpha.*h).*cos(beta.*h).*(beta.^2./2 - k.^2./2) - alpha.^2.*beta.*cos(alpha.*h).*cos(beta.*h)).^2 - beta.^2.*(beta.*cos(alpha.*h).*sin(beta.*h).*(beta.^2./2 - k.^2./2) + alpha.*k.^2.*cos(beta.*h).*sin(alpha.*h)).^2 - k.^4.*(cos(alpha.*h).*sin(beta.*h).*(beta.^2./2 - k.^2./2) - alpha.*beta.*cos(beta.*h).*sin(alpha.*h)).^2 + beta.*k.^2.*(beta.*cos(alpha.*h).*sin(beta.*h).*(beta.^2./2 - k.^2./2) + alpha.*k.^2.*cos(beta.*h).*sin(alpha.*h)).*(cos(alpha.*h).*sin(beta.*h).*(beta.^2./2 - k.^2./2) - alpha.*beta.*cos(beta.*h).*sin(alpha.*h))) + B.*k.*(beta.*cos(alpha.*h).*cos(beta.*h).*(beta.^2./2 - k.^2./2) - alpha.^2.*beta.*cos(alpha.*h).*cos(beta.*h)).*(k.*(beta.*cos(alpha.*h).*cos(beta.*h).*(beta.^2./2 - k.^2./2) - alpha.^2.*beta.*cos(alpha.*h).*cos(beta.*h)) - beta.*k.*(cos(alpha.*h).*cos(beta.*h).*(beta.^2./2 - k.^2./2) + k.^2.*cos(alpha.*h).*cos(beta.*h))) + k.*(B + lambda).*(beta.*cos(alpha.*h).*cos(beta.*h).*(beta.^2./2 - k.^2./2) - alpha.^2.*beta.*cos(alpha.*h).*cos(beta.*h)).*(k.*(beta.*cos(alpha.*h).*cos(beta.*h).*(beta.^2./2 - k.^2./2) - alpha.^2.*beta.*cos(alpha.*h).*cos(beta.*h)) - beta.*k.*(cos(alpha.*h).*cos(beta.*h).*(beta.^2./2 - k.^2./2) + k.^2.*cos(alpha.*h).*cos(beta.*h))) - 2.*C.*beta.*k.^2.*(beta.*cos(alpha.*h).*cos(beta.*h).*(beta.^2./2 - k.^2./2) - alpha.^2.*beta.*cos(alpha.*h).*cos(beta.*h)).*(cos(alpha.*h).*cos(beta.*h).*(beta.^2./2 - k.^2./2) + k.^2.*cos(alpha.*h).*cos(beta.*h)) + B.*beta.*k.^2.*(beta.*cos(alpha.*h).*sin(beta.*h).*(beta.^2./2 - k.^2./2) + alpha.*k.^2.*cos(beta.*h).*sin(alpha.*h)).*(cos(alpha.*h).*sin(beta.*h).*(beta.^2./2 - k.^2./2) - alpha.*beta.*cos(beta.*h).*sin(alpha.*h))).*2i;% auto calculated expression

%
y_num = 1001;
df_vol_dy_list = zeros(y_num,length(h));
y_list = zeros(y_num,length(h));
dy = 2*h/(y_num-1);
for n = 1:y_num
    y = -h + dy*(n-1);
    y_list(n,:) = y;
    df_vol_dy_list(n,:) = - omega.*conj(k_2).*(sin(y.*conj(beta_2)).*cos(h.*conj(alpha_2)).*(conj(beta_2).^2./2 - conj(k_2).^2./2) - sin(y.*conj(alpha_2)).*conj(alpha_2).*conj(beta_2).*cos(h.*conj(beta_2))).*((A./4 + B).*(k.^3.*(cos(alpha.*h).*sin(beta.*y).*(beta.^2./2 - k.^2./2) - alpha.*beta.*cos(beta.*h).*sin(alpha.*y)).*(beta.^2.*cos(alpha.*h).*sin(beta.*y).*(beta.^2./2 - k.^2./2) - alpha.^3.*beta.*cos(beta.*h).*sin(alpha.*y)).*1i + beta.^2.*k.*(beta.*cos(alpha.*h).*sin(beta.*y).*(beta.^2./2 - k.^2./2) + alpha.*k.^2.*cos(beta.*h).*sin(alpha.*y)).^2.*1i - 2.*beta.*k.^2.*(beta.*cos(alpha.*h).*cos(beta.*y).*(beta.^2./2 - k.^2./2) - alpha.^2.*beta.*cos(beta.*h).*cos(alpha.*y)).*(beta.*cos(alpha.*h).*sin(beta.*y).*(beta.^2./2 - k.^2./2) + alpha.*k.^2.*cos(beta.*h).*sin(alpha.*y))) + (B + lambda).*(k.^4.*(cos(alpha.*h).*sin(beta.*y).*(beta.^2./2 - k.^2./2) - alpha.*beta.*cos(beta.*h).*sin(alpha.*y)).*(beta.*cos(alpha.*h).*cos(beta.*y).*(beta.^2./2 - k.^2./2) - alpha.^2.*beta.*cos(beta.*h).*cos(alpha.*y)) - beta.*k.^2.*(beta.^2.*cos(alpha.*h).*sin(beta.*y).*(beta.^2./2 - k.^2./2) - alpha.^3.*beta.*cos(beta.*h).*sin(alpha.*y)).*(cos(alpha.*h).*cos(beta.*y).*(beta.^2./2 - k.^2./2) + k.^2.*cos(beta.*h).*cos(alpha.*y))) + (A./4 + mu).*(beta.^2.*(alpha.^2.*k.^2.*cos(beta.*h).*cos(alpha.*y) + beta.^2.*cos(alpha.*h).*cos(beta.*y).*(beta.^2./2 - k.^2./2)).*(beta.*cos(alpha.*h).*sin(beta.*y).*(beta.^2./2 - k.^2./2) + alpha.*k.^2.*cos(beta.*h).*sin(alpha.*y)) + 4.*k.^4.*(cos(alpha.*h).*sin(beta.*y).*(beta.^2./2 - k.^2./2) - alpha.*beta.*cos(beta.*h).*sin(alpha.*y)).*(beta.*cos(alpha.*h).*cos(beta.*y).*(beta.^2./2 - k.^2./2) - alpha.^2.*beta.*cos(beta.*h).*cos(alpha.*y)) - beta.*k.^2.*(cos(alpha.*h).*sin(beta.*y).*(beta.^2./2 - k.^2./2) - alpha.*beta.*cos(beta.*h).*sin(alpha.*y)).*(alpha.^2.*k.^2.*cos(beta.*h).*cos(alpha.*y) + beta.^2.*cos(alpha.*h).*cos(beta.*y).*(beta.^2./2 - k.^2./2)) - 2.*beta.*k.^2.*(beta.*cos(alpha.*h).*cos(beta.*y).*(beta.^2./2 - k.^2./2) - alpha.^2.*beta.*cos(beta.*h).*cos(alpha.*y)).*(beta.*cos(alpha.*h).*sin(beta.*y).*(beta.^2./2 - k.^2./2) + alpha.*k.^2.*cos(beta.*h).*sin(alpha.*y))) - (B + 2.*C).*(beta.*k.^2.*(beta.^2.*cos(alpha.*h).*sin(beta.*y).*(beta.^2./2 - k.^2./2) - alpha.^3.*beta.*cos(beta.*h).*sin(alpha.*y)).*(cos(alpha.*h).*cos(beta.*y).*(beta.^2./2 - k.^2./2) + k.^2.*cos(beta.*h).*cos(alpha.*y)) + beta.*k.^2.*(beta.*cos(alpha.*h).*cos(beta.*y).*(beta.^2./2 - k.^2./2) - alpha.^2.*beta.*cos(beta.*h).*cos(alpha.*y)).*(beta.*cos(alpha.*h).*sin(beta.*y).*(beta.^2./2 - k.^2./2) + alpha.*k.^2.*cos(beta.*h).*sin(alpha.*y))) + (beta.^2.*(alpha.^2.*k.^2.*cos(beta.*h).*cos(alpha.*y) + beta.^2.*cos(alpha.*h).*cos(beta.*y).*(beta.^2./2 - k.^2./2)).*(beta.*cos(alpha.*h).*sin(beta.*y).*(beta.^2./2 - k.^2./2) + alpha.*k.^2.*cos(beta.*h).*sin(alpha.*y)) + 2.*k.^4.*(cos(alpha.*h).*sin(beta.*y).*(beta.^2./2 - k.^2./2) - alpha.*beta.*cos(beta.*h).*sin(alpha.*y)).*(beta.*cos(alpha.*h).*cos(beta.*y).*(beta.^2./2 - k.^2./2) - alpha.^2.*beta.*cos(beta.*h).*cos(alpha.*y)) - beta.*k.^2.*(beta.*cos(alpha.*h).*cos(beta.*y).*(beta.^2./2 - k.^2./2) - alpha.^2.*beta.*cos(beta.*h).*cos(alpha.*y)).*(beta.*cos(alpha.*h).*sin(beta.*y).*(beta.^2./2 - k.^2./2) + alpha.*k.^2.*cos(beta.*h).*sin(alpha.*y))).*(A./4 + B + lambda + mu)).*1i - omega.*conj(beta_2).*(cos(y.*conj(alpha_2)).*conj(k_2).^2.*cos(h.*conj(beta_2)) + cos(y.*conj(beta_2)).*cos(h.*conj(alpha_2)).*(conj(beta_2).^2./2 - conj(k_2).^2./2)).*((k.^5.*(cos(alpha.*h).*sin(beta.*y).*(beta.^2./2 - k.^2./2) - alpha.*beta.*cos(beta.*h).*sin(alpha.*y)).^2.*1i + beta.^2.*k.*(beta.*cos(alpha.*h).*sin(beta.*y).*(beta.^2./2 - k.^2./2) + alpha.*k.^2.*cos(beta.*h).*sin(alpha.*y)).^2.*2i + beta.*k.^3.*(beta.*cos(alpha.*h).*cos(beta.*y).*(beta.^2./2 - k.^2./2) - alpha.^2.*beta.*cos(beta.*h).*cos(alpha.*y)).*(cos(alpha.*h).*cos(beta.*y).*(beta.^2./2 - k.^2./2) + k.^2.*cos(beta.*h).*cos(alpha.*y)).*1i).*(A./4 + B + lambda + mu) + (A./4 + mu).*(k.^5.*(cos(alpha.*h).*sin(beta.*y).*(beta.^2./2 - k.^2./2) - alpha.*beta.*cos(beta.*h).*sin(alpha.*y)).^2.*1i + beta.^2.*k.*(beta.*cos(alpha.*h).*sin(beta.*y).*(beta.^2./2 - k.^2./2) + alpha.*k.^2.*cos(beta.*h).*sin(alpha.*y)).^2.*2i - beta.*k.^3.*(cos(alpha.*h).*sin(beta.*y).*(beta.^2./2 - k.^2./2) - alpha.*beta.*cos(beta.*h).*sin(alpha.*y)).*(beta.*cos(alpha.*h).*sin(beta.*y).*(beta.^2./2 - k.^2./2) + alpha.*k.^2.*cos(beta.*h).*sin(alpha.*y)).*3i - beta.^2.*k.*(alpha.^2.*k.^2.*cos(beta.*h).*cos(alpha.*y) + beta.^2.*cos(alpha.*h).*cos(beta.*y).*(beta.^2./2 - k.^2./2)).*(cos(alpha.*h).*cos(beta.*y).*(beta.^2./2 - k.^2./2) + k.^2.*cos(beta.*h).*cos(alpha.*y)).*2i) + (B + lambda).*(beta.*k.^3.*(beta.*cos(alpha.*h).*cos(beta.*y).*(beta.^2./2 - k.^2./2) - alpha.^2.*beta.*cos(beta.*h).*cos(alpha.*y)).*(cos(alpha.*h).*cos(beta.*y).*(beta.^2./2 - k.^2./2) + k.^2.*cos(beta.*h).*cos(alpha.*y)).*1i - beta.^2.*k.*(alpha.^2.*k.^2.*cos(beta.*h).*cos(alpha.*y) + beta.^2.*cos(alpha.*h).*cos(beta.*y).*(beta.^2./2 - k.^2./2)).*(cos(alpha.*h).*cos(beta.*y).*(beta.^2./2 - k.^2./2) + k.^2.*cos(beta.*h).*cos(alpha.*y)).*1i) + (A./4 + B).*(k.^4.*(cos(alpha.*h).*sin(beta.*y).*(beta.^2./2 - k.^2./2) - alpha.*beta.*cos(beta.*h).*sin(alpha.*y)).*(beta.*cos(alpha.*h).*cos(beta.*y).*(beta.^2./2 - k.^2./2) - alpha.^2.*beta.*cos(beta.*h).*cos(alpha.*y)) + beta.*k.^3.*(beta.*cos(alpha.*h).*cos(beta.*y).*(beta.^2./2 - k.^2./2) - alpha.^2.*beta.*cos(beta.*h).*cos(alpha.*y)).*(cos(alpha.*h).*cos(beta.*y).*(beta.^2./2 - k.^2./2) + k.^2.*cos(beta.*h).*cos(alpha.*y)).*1i - beta.*k.^3.*(cos(alpha.*h).*sin(beta.*y).*(beta.^2./2 - k.^2./2) - alpha.*beta.*cos(beta.*h).*sin(alpha.*y)).*(beta.*cos(alpha.*h).*sin(beta.*y).*(beta.^2./2 - k.^2./2) + alpha.*k.^2.*cos(beta.*h).*sin(alpha.*y)).*1i + beta.^2.*k.^2.*(beta.*cos(alpha.*h).*sin(beta.*y).*(beta.^2./2 - k.^2./2) + alpha.*k.^2.*cos(beta.*h).*sin(alpha.*y)).*(cos(alpha.*h).*cos(beta.*y).*(beta.^2./2 - k.^2./2) + k.^2.*cos(beta.*h).*cos(alpha.*y))) + beta.*k.^3.*(B + 2.*C).*(beta.*cos(alpha.*h).*cos(beta.*y).*(beta.^2./2 - k.^2./2) - alpha.^2.*beta.*cos(beta.*h).*cos(alpha.*y)).*(cos(alpha.*h).*cos(beta.*y).*(beta.^2./2 - k.^2./2) + k.^2.*cos(beta.*h).*cos(alpha.*y)).*2i);% auto calculated expression
end

f_vol = zeros(1,length(h));
for m = 1:length(h)
    f_vol(m) = trapz(y_list(:,m),df_vol_dy_list(:,m));
end


end

